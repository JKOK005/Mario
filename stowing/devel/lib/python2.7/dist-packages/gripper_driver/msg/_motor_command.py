# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gripper_driver/motor_command.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class motor_command(genpy.Message):
  _md5sum = "8abb8dc4e270785b228e26d3dff0970e"
  _type = "gripper_driver/motor_command"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool read_angle
bool read_load
bool gripper_ready
bool gripper_open
bool gripper_close
bool gripper_standby
"""
  __slots__ = ['read_angle','read_load','gripper_ready','gripper_open','gripper_close','gripper_standby']
  _slot_types = ['bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       read_angle,read_load,gripper_ready,gripper_open,gripper_close,gripper_standby

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(motor_command, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.read_angle is None:
        self.read_angle = False
      if self.read_load is None:
        self.read_load = False
      if self.gripper_ready is None:
        self.gripper_ready = False
      if self.gripper_open is None:
        self.gripper_open = False
      if self.gripper_close is None:
        self.gripper_close = False
      if self.gripper_standby is None:
        self.gripper_standby = False
    else:
      self.read_angle = False
      self.read_load = False
      self.gripper_ready = False
      self.gripper_open = False
      self.gripper_close = False
      self.gripper_standby = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_6B.pack(_x.read_angle, _x.read_load, _x.gripper_ready, _x.gripper_open, _x.gripper_close, _x.gripper_standby))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.read_angle, _x.read_load, _x.gripper_ready, _x.gripper_open, _x.gripper_close, _x.gripper_standby,) = _struct_6B.unpack(str[start:end])
      self.read_angle = bool(self.read_angle)
      self.read_load = bool(self.read_load)
      self.gripper_ready = bool(self.gripper_ready)
      self.gripper_open = bool(self.gripper_open)
      self.gripper_close = bool(self.gripper_close)
      self.gripper_standby = bool(self.gripper_standby)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_6B.pack(_x.read_angle, _x.read_load, _x.gripper_ready, _x.gripper_open, _x.gripper_close, _x.gripper_standby))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.read_angle, _x.read_load, _x.gripper_ready, _x.gripper_open, _x.gripper_close, _x.gripper_standby,) = _struct_6B.unpack(str[start:end])
      self.read_angle = bool(self.read_angle)
      self.read_load = bool(self.read_load)
      self.gripper_ready = bool(self.gripper_ready)
      self.gripper_open = bool(self.gripper_open)
      self.gripper_close = bool(self.gripper_close)
      self.gripper_standby = bool(self.gripper_standby)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6B = struct.Struct("<6B")
